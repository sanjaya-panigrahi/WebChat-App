/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.webchat.chatapp.chat_service.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ChatMessageDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8063297987526631537L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChatMessageDTO\",\"namespace\":\"com.webchat.chatapp.chat_service.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"chatId\",\"type\":\"string\"},{\"name\":\"senderId\",\"type\":\"string\"},{\"name\":\"recipientId\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"content\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChatMessageDTO> ENCODER =
      new BinaryMessageEncoder<ChatMessageDTO>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChatMessageDTO> DECODER =
      new BinaryMessageDecoder<ChatMessageDTO>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ChatMessageDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ChatMessageDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ChatMessageDTO>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ChatMessageDTO to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ChatMessageDTO from a ByteBuffer. */
  public static ChatMessageDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence chatId;
  @Deprecated public java.lang.CharSequence senderId;
  @Deprecated public java.lang.CharSequence recipientId;
  @Deprecated public java.lang.CharSequence content;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChatMessageDTO() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param chatId The new value for chatId
   * @param senderId The new value for senderId
   * @param recipientId The new value for recipientId
   * @param content The new value for content
   */
  public ChatMessageDTO(java.lang.Long id, java.lang.CharSequence chatId, java.lang.CharSequence senderId, java.lang.CharSequence recipientId, java.lang.CharSequence content) {
    this.id = id;
    this.chatId = chatId;
    this.senderId = senderId;
    this.recipientId = recipientId;
    this.content = content;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return chatId;
    case 2: return senderId;
    case 3: return recipientId;
    case 4: return content;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: chatId = (java.lang.CharSequence)value$; break;
    case 2: senderId = (java.lang.CharSequence)value$; break;
    case 3: recipientId = (java.lang.CharSequence)value$; break;
    case 4: content = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'chatId' field.
   * @return The value of the 'chatId' field.
   */
  public java.lang.CharSequence getChatId() {
    return chatId;
  }

  /**
   * Sets the value of the 'chatId' field.
   * @param value the value to set.
   */
  public void setChatId(java.lang.CharSequence value) {
    this.chatId = value;
  }

  /**
   * Gets the value of the 'senderId' field.
   * @return The value of the 'senderId' field.
   */
  public java.lang.CharSequence getSenderId() {
    return senderId;
  }

  /**
   * Sets the value of the 'senderId' field.
   * @param value the value to set.
   */
  public void setSenderId(java.lang.CharSequence value) {
    this.senderId = value;
  }

  /**
   * Gets the value of the 'recipientId' field.
   * @return The value of the 'recipientId' field.
   */
  public java.lang.CharSequence getRecipientId() {
    return recipientId;
  }

  /**
   * Sets the value of the 'recipientId' field.
   * @param value the value to set.
   */
  public void setRecipientId(java.lang.CharSequence value) {
    this.recipientId = value;
  }

  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public java.lang.CharSequence getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.CharSequence value) {
    this.content = value;
  }

  /**
   * Creates a new ChatMessageDTO RecordBuilder.
   * @return A new ChatMessageDTO RecordBuilder
   */
  public static com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder newBuilder() {
    return new com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder();
  }

  /**
   * Creates a new ChatMessageDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChatMessageDTO RecordBuilder
   */
  public static com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder newBuilder(com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder other) {
    return new com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder(other);
  }

  /**
   * Creates a new ChatMessageDTO RecordBuilder by copying an existing ChatMessageDTO instance.
   * @param other The existing instance to copy.
   * @return A new ChatMessageDTO RecordBuilder
   */
  public static com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder newBuilder(com.webchat.chatapp.chat_service.dto.ChatMessageDTO other) {
    return new com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder(other);
  }

  /**
   * RecordBuilder for ChatMessageDTO instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChatMessageDTO>
    implements org.apache.avro.data.RecordBuilder<ChatMessageDTO> {

    private long id;
    private java.lang.CharSequence chatId;
    private java.lang.CharSequence senderId;
    private java.lang.CharSequence recipientId;
    private java.lang.CharSequence content;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chatId)) {
        this.chatId = data().deepCopy(fields()[1].schema(), other.chatId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.senderId)) {
        this.senderId = data().deepCopy(fields()[2].schema(), other.senderId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recipientId)) {
        this.recipientId = data().deepCopy(fields()[3].schema(), other.recipientId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.content)) {
        this.content = data().deepCopy(fields()[4].schema(), other.content);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ChatMessageDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(com.webchat.chatapp.chat_service.dto.ChatMessageDTO other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.chatId)) {
        this.chatId = data().deepCopy(fields()[1].schema(), other.chatId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.senderId)) {
        this.senderId = data().deepCopy(fields()[2].schema(), other.senderId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.recipientId)) {
        this.recipientId = data().deepCopy(fields()[3].schema(), other.recipientId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.content)) {
        this.content = data().deepCopy(fields()[4].schema(), other.content);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'chatId' field.
      * @return The value.
      */
    public java.lang.CharSequence getChatId() {
      return chatId;
    }

    /**
      * Sets the value of the 'chatId' field.
      * @param value The value of 'chatId'.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder setChatId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.chatId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'chatId' field has been set.
      * @return True if the 'chatId' field has been set, false otherwise.
      */
    public boolean hasChatId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'chatId' field.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder clearChatId() {
      chatId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'senderId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSenderId() {
      return senderId;
    }

    /**
      * Sets the value of the 'senderId' field.
      * @param value The value of 'senderId'.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder setSenderId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.senderId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'senderId' field has been set.
      * @return True if the 'senderId' field has been set, false otherwise.
      */
    public boolean hasSenderId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'senderId' field.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder clearSenderId() {
      senderId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipientId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecipientId() {
      return recipientId;
    }

    /**
      * Sets the value of the 'recipientId' field.
      * @param value The value of 'recipientId'.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder setRecipientId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.recipientId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'recipientId' field has been set.
      * @return True if the 'recipientId' field has been set, false otherwise.
      */
    public boolean hasRecipientId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'recipientId' field.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder clearRecipientId() {
      recipientId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public java.lang.CharSequence getContent() {
      return content;
    }

    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder setContent(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.content = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public com.webchat.chatapp.chat_service.dto.ChatMessageDTO.Builder clearContent() {
      content = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChatMessageDTO build() {
      try {
        ChatMessageDTO record = new ChatMessageDTO();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.chatId = fieldSetFlags()[1] ? this.chatId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.senderId = fieldSetFlags()[2] ? this.senderId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.recipientId = fieldSetFlags()[3] ? this.recipientId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.content = fieldSetFlags()[4] ? this.content : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChatMessageDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChatMessageDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChatMessageDTO>
    READER$ = (org.apache.avro.io.DatumReader<ChatMessageDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
